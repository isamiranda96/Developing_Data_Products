# Convert the list into a vector
unlist()
}
get_titles(html)
library(rvest)
library(tidyr)
library(tibble)
library(janitor)
library(tidyverse)
library(stringr)
library(rebus)
library(lubridate)
library(data.table)
get_titles <- function(html){
html %>%
# The relevant tag
html_nodes('.s175oqvb-1 cEtbQk') %>%
html_text() %>%
# Trim additional white space
str_trim() %>%
# Convert the list into a vector
unlist()
}
get_titles(html)
library(swirl)
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layou=c(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["limits"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile="plot1.R", local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot1.R"), local = TRUE)
source(pathtofile("plot2.R"), local = TRUE)
str()
str(p2)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit(myLabels.R)
myedit("myLabels.R")
pathtofile("myLabels.R")
pathtofile("myLabels.R", local=TRUE)
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
sample(colors(), 10)
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
pal(6)
p1(1)
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(40))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = 0.5)
p3(5)
plot(x, y, pch=19, col=rgb(0,0.5,0.5))
plot(x, y, pch=19, col=rgb(0,0.5,0.5,0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point","smooth"))
qplot(hwy, data=mpg, color=drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(color=drv, y=hwy, data=mpg, geom="boxplot")
qplot(color=drv, x=hwy, data=mpg, geom="boxplot")
qplot(x=drv, y=hwy, data=mpg, geom="boxplot")
qplot(x=drv, y=hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(dospl, hwy, data=mpg, facets = .~drv)
qplot(displ, hwy, data=mpg, facets = .~drv)
qplot(hwy, data=mpg, facets = drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point","smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(size=2, alpha=1/2, aes(color=drv))+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
warnings()
plot(myx, myy, type = "l", ylim = c(-3,3))
g+ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(testdat, aes(x=displ, y=hwy, color=factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut ~ car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(. ~ cut)
knitr::opts_chunk$set(echo = FALSE)
data <- datasets.load_iris()
data <- mcars()
data = datasets.load_iris()
library(datasets)
data(iris)
library(datasets)
data <- data(iris)
View(figurines)
library(datasets)
data <- data(iris)
head(data)
summary(cars)
summary(cars)
head(cars)
summary(cars)
library(datasets)
summary(iris)
library(datasets)
library(plotly)
plot_ly(iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers",
color= ~Petal.Lenght,
size= ~Petal.Lenght )
plot_ly(iris, iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers",
color= ~Petal.Lenght,
size= ~Petal.Lenght )
View(iris)
plot_ly(iris, iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers",
color= ~Petal.Lenght,
size= ~Petal.Lenght )
View(iris)
plot_ly(iris, iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers",
color= ~Petal.Lenght,
size= ~Petal.Lenght )
plot_ly(iris, iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers",
color= ~carat,
size= ~carat )
plot_ly(iris, iris$Petal.Length, iris$Petal.Width ,
type= "scatter",
mode= "markers")
plot_ly(iris, `~Petal.Length, ~Petal.Width ,
type = 'scatter',
mode = 'markers')
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers')
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
colors = 'set 3')
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
colors = 'green')
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
marker = dict(color=np.random.randn(150),
size=10,
colorscale='Viridis',
showscale=False))
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
marker = list(color=np.random.randn(150),
size=10,
colorscale='Viridis',
showscale=False))
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers')
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
colors = viridis_pal(option = "D")(3))
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
color = 'markers',
colors = viridis_pal(option = "D")(3))
library(viridis)
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
color = 'markers',
colors = viridis_pal(option = "D")(3))
plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width ,
type = 'scatter',
mode = 'markers',
color = 'markers',
colors = viridis_pal()(3))
library(datasets)
library(plotly)
library(viridis)
library(swirl)
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
9
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
denmt
plot(denmt)
distmt
cmat
points(cx, cy, col=C("red", "orange", "purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col="red", "orange", "purple", pch=3, cex=2, lwd=2)
points(cx, cy, col=paste("red", "orange", "purple"), pch=3, cex=2, lwd=2)
points(cx, cy, col= cat("red", "orange", "purple", sep=","), pch=3, cex=2, lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x, newClust, mean)
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, col=cols1[newClust2], pch=19, cex=2)
points(x, y, pch=19, cex=2, col=cols1[newClust2])
tapply
tapply( x, newClust2, mean)
tapply( y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster, pch=19, cex=2)
points(kmObj$centers, col=c("black","red","green"), pch=3, cex=3, lwd=3)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
plot(x, y, col=kmeans(dataFrame,6)$cluster, pch=19, cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu*t(matv)
matu**t(matv)
matu%*%t(matv)
matu %*% diag %*% t(matv)
svd(mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1]*svd1$d[1])%*%svd1$v[,1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% svd1$d[1:2] %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage() <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(a2) <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
dist(x[.1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(midst)
hclustering <- hclust(mdst)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(x[,10:12])
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1)
names(sub1[maxCon])
kCust <- kmeans(sub1[,1:561])
kCust <- kmeans(sub1[,1:561], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
which(kClust$size==29)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch=19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch=19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
strsplit(cnames, '|', fixed = TRUE)
cnames <- strsplit(cnames, '|', fixed = TRUE)
names
print(cnames)
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
a
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, %Y%%in%pm0$Date == 1999 || %Y%%in%pm0$Date == 2000  )
cnt0 <- subset(pm0, %Y%%in%pm0$Date == 1999 || %Y%%in%pm0$Date == 2000)
subset(pm0, %Y%%in%pm0$Date == 1999 || %Y%%in%pm0$Date == 2000)
cnt0 <- subset(pm0, %in%pm0$Date == 1999 || %Y%%in%pm0$Date == 2000)
subset(pm0, pm0$Date == 1999 || pm0$Date == 2000)
cnt0 <- subset(pm0, pm0$Date == 1999 || pm0$Date == 2000)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, cnt0$County.Code == 63, cnt0$Site.ID == 2008)
pm0sub <- subset(cnt0$County.Code == 63, cnt0$Site.ID == 2008)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar=c(4,4,2,1))
plot(dates0, x0sub, pch=20)
abline(lwd=2, median(x0sub, na.rm = TRUE))
abline(lwd=2, x0sub, na.rm = TRUE)
abline(lwd=2, median(x0sub))
abline(lwd= 2, median(x0sub))
abline(lwd = 2, median(x0sub))
abline()
abline(h = median(x0sub, na.rm = TRUE),lwd=2)
plot(dates1, x1sub, pch=20)
abline(h = median(x1sub, na.rm = TRUE),lwd=2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean(), na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
mn0
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, set="state")
mrg <- merge(d0, d1, by ="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5,2.5)))
points(rep(2,52), mrg[,3])
with(mrg, points(rep(2, 52), mrg[, 3]))
segments(x,y )
segments(x0,y0,x1,y1 )
segments(mn0,mn1)
segments(mn0$,mn1, )
mn0
head(mn0)
head(d0)
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y, ]
shiny::runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
runApp('C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project')
setwd("C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project")
runApp()
runApp()
years <- data[,"year"]
years <- data[,year]
setwd("C:/Users/Isa Miranda/Desktop/Coursera/Data_Products_Course_Project/Project")
library(shiny)
library(dplyr)
library(ggplot2)
library(data.table)
library(DescTools)
data <- read.csv("cicle.csv")
years <- data[,year]
years <- data[,"year"]
runApp()
runApp()
runApp()
year <- data[,"year"]
runApp()
